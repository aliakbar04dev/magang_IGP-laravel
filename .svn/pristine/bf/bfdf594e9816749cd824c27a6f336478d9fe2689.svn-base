<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
use Yajra\Datatables\Html\Builder;
use Yajra\Datatables\Facades\Datatables;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;
use DB;
use Exception;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use App\User;
use App\InternalAudit;
use PDF;
use Illuminate\Support\Str;

class InternalAuditController extends Controller
{
    function auditor_form(){
        $ia = new InternalAudit;
        $data_training2 = $ia->getTrainingData();
        $list_training = $ia->getRequiredTraining();
        $get_latest = $ia->getTahunNow();
        $data_nama = $ia->getNamaData(Auth::user()->username, $get_latest->tahun, $get_latest->rev_no);
        // $get_info = $ia->getTrainingDataByNpk("05770");

        
        // return $data_training2;
        return view('audit._form-auditor', ['get_latest' => $get_latest, 'data_training2' => $data_training2, 'data_nama' => $data_nama, 'list_training' => $list_training]);
    }

    function add_row_draft(Request $request){
    
            // return $getTrainingData;
            if ($request->ajax()) {
                try {
                    DB::beginTransaction();
                    $msg = "Berhasil disubmit.";
                    $indicator = "1";

                    DB::table('ia_pic2')
                    ->insert([
                        'tahun' => $request->tahun,
                        'rev_no' => $request->rev,
                        'npk' => $request->npk,
                        'remark' => $request->remark,
                        'inisial' => $request->inisial
                    ]);

                    $info_npk = new InternalAudit;
                    $get_info = $info_npk->getTrainingDataByNpk($request->npk);
                    
                    DB::commit();


                    return response()->json(['npk_data' => $getTrainingData, 'msg' => $msg, 'indicator' => $indicator]);

                } catch (Exception $ex) {
                    DB::rollback();
                    $msg = "Gagal submit! Hubungi Admin.";
                    $indicator = "0";
                    $info_npk = new InternalAudit;
                    $get_info = $info_npk->getTrainingDataByNpk($request->npk);
                
                    return response()->json(['test'=>$get_info ,'msg' => $msg, 'indicator' => $indicator]);
            }
        } else {
            return view('errors.403');
        }
        
    }

    function delete_row_draft(Request $request){
    
        // return $getTrainingData;
        if ($request->ajax()) {
            try {
                DB::beginTransaction();
                $msg = "Berhasil disubmit.";
                $indicator = "1";

                DB::table('ia_pic2')
                ->where([
                    ['npk', 'like', $request->npk],
                    ['tahun', 'like', $request->tahun],
                    ['rev_no', 'like', $request->rev],
                    ])
                ->delete();
                
                DB::commit();

                return response()->json(['msg' => $msg, 'indicator' => $indicator]);

            } catch (Exception $ex) {
                DB::rollback();
                $msg = "Gagal submit! Hubungi Admin.";
                $indicator = "0";
            
                return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }
    } else {
        return view('errors.403');
    }
    
}

public function edit_remark(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";
            
            DB::table('ia_pic2')
            ->where([
                ['npk', 'like', $request->npk],
                ['tahun', 'like', $request->tahun],
                ['rev_no', 'like', $request->rev],
                ])           
            ->update(['remark' => $request->remark]);
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }       

    }

public function save_not_draft(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";
            
            DB::table('ia_pic1')
            ->where([
                ['tahun', 'like', $request->tahun],
                ['rev_no', 'like', $request->rev],
                ])           
            ->update(['rev_no' => substr($request->rev, 0, 2)]);
            
            DB::table('ia_pic2')
            ->where([
                ['tahun', 'like', $request->tahun],
                ['rev_no', 'like', $request->rev],
                ])           
            ->update(['rev_no' => substr($request->rev, 0, 2)]);
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
    }

    }

    public function edit_new_rev(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";

            $eachdata_training = DB::table('ia_pic2')
            ->where([
                ['tahun', 'like', $request->tahun],
                ['rev_no', 'like', $request->rev],
                ])
            ->orderBy('rev_no', 'desc')                   
            ->get();

            $get_latest = DB::table('ia_pic1')
            ->where([
                ['tahun', 'like', $request->tahun],
                ['rev_no', 'like', $request->rev],
                ])
            ->orderBy('rev_no', 'desc')        
            ->first();

            $tahun1 = Carbon::now()->format('Y');
            $rev_no1 = str_pad($get_latest->rev_no + 1, 2, 0, STR_PAD_LEFT);

            DB::table('ia_pic1')
            ->insert([
            'tahun' => $tahun1,
            'rev_no' => $rev_no1.'_D',
            'npk_prepared'  => Auth::user()->username,
            'date'  => Carbon::now(),
            ]);
            
            $eachdata = DB::table('ia_pic2')
            ->where([
                ['tahun', 'like', $request->tahun],
                ['rev_no', 'like', $request->rev],
                ])           
            ->get();
            
            foreach ($eachdata as $data){
                $tahun2 = Carbon::now()->format('Y');
                $rev_no2 = str_pad($data->rev_no + 1, 2, 0, STR_PAD_LEFT);
                DB::table('ia_pic2')
                ->insert([
                'tahun' => $tahun2,
                'rev_no' => $rev_no2.'_D',
                'npk'  => $data->npk,
                'remark'  => $data->remark,
                'inisial' => $data->inisial
                ]);
            }
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
    }

    }

    public function daftar_auditor(){
        $ia = new InternalAudit;
        $data_training2 = $ia->getTrainingData2();
        $list_training = $ia->getRequiredTraining();
        $get_latest = $ia->getTahunNow2();
        $data_nama = $ia->getNamaData2('%%', $get_latest->tahun, $get_latest->rev_no);
        // $get_info = $ia->getTrainingDataByNpk("05770");

        
        // return $data_training2;
        return view('audit.report.daftar-auditor', ['get_latest' => $get_latest, 'data_training2' => $data_training2, 'data_nama' => $data_nama, 'list_training' => $list_training]);
    
    }

    public function turtle_form(){
        
        $ia = new InternalAudit;
        $get_last_td = $ia->getLastTD();
        
        if($get_last_td == null){
            DB::table('ia_mas_tdiagram')       
            ->insert([
                'kd_td' => 'TURTLE01',
                'date' => Carbon::now(),
                'npk_prepared' => Auth::user()->username,
                'td_name' => 'TURTLE DIAGRAM DEFAULT',
                ]);

            DB::table('ia_tdiagram_content')       
            ->insert([
                'kd_td' => 'TURTLE01',
                ]);
            
            $get_last_td = $ia->getLastTD();
            $get_all_td = $ia->getAllListTD();
            $get_all_draft = $ia->getAllListDraft();
            $get_npk_reviewed = $ia->getNPKReviewed($get_last_td->kd_td);
        } else {
            $get_last_td = $ia->getLastTD();
            $get_all_td = $ia->getAllListTD();
            $get_all_draft = $ia->getAllListDraft();
            $get_npk_reviewed = $ia->getNPKReviewed($get_last_td->kd_td);

        }


        // return $get_last_td;
        return view('audit.turtlediagram._form-turtle', ['last_td' => $get_last_td, 'all_td' => $get_all_td, 'all_review' => $get_npk_reviewed, 'all_draft' => $get_all_draft]);

    }

    public function turtle_form_load($kd){
        $ia = new InternalAudit;
        $get_selected_td = $ia->getSelectedData($kd);
        $get_all_td = $ia->getAllListTD();
        $get_all_draft = $ia->getAllListDraft();
        $get_npk_reviewed = $ia->getNPKReviewed($kd);


        // return $get_last_td;

        return view('audit.turtlediagram._form-turtle', ['last_td' => $get_selected_td, 'all_td' => $get_all_td, 'all_review' => $get_npk_reviewed, 'all_draft' => $get_all_draft]);
    }

    public function create_turtle(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";

            $latest_kd = DB::table('ia_mas_tdiagram')
            ->select('kd_td')
            ->orderBy('kd_td', 'desc')
            ->first();


            if(substr($latest_kd->kd_td, -2) != '_D'){
                $lastincrement = substr($latest_kd->kd_td, -2);
                $latest_kds = 'TURTLE' . str_pad($lastincrement + 1, 2, 0, STR_PAD_LEFT);
            } else {
                $lastincrement = substr($latest_kd->kd_td, 6, -2);
                $latest_kds = 'TURTLE' . str_pad($lastincrement + 1, 2, 0, STR_PAD_LEFT);
            }
            
            DB::table('ia_mas_tdiagram')       
            ->insert([
                'kd_td' => $latest_kds.'_D',
                'date' => Carbon::now(),
                'npk_prepared' => Auth::user()->username,
                'td_name' => $request->nama,
                ]);

            DB::table('ia_tdiagram_content')       
            ->insert([
                'kd_td' => $latest_kds.'_D',
                ]);
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }       

    }

    public function edit_turtle(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";
            
            DB::table('ia_tdiagram_content')
            ->where([
                ['kd_td', 'like', $request->kd_td],
                ])           
            ->update([$request->column => $request->content]);
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }       

    }

    public function save_turtle(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";
            
            DB::table('ia_tdiagram_content')
            ->where([
                ['kd_td', 'like', $request->kd_td],
                ])           
            ->update([
                'kd_td' => substr($request->kd_td, 0, 8),
                'what_content' => $request->c_what,
                'risk_content' => $request->c_risk,
                'who_content' => $request->c_who,
                'input_content' => $request->c_input,
                'process_content' => $request->c_process,
                'output_content' => $request->c_output,
                'how_content' => $request->c_how,
                'supporting_content' => $request->c_supporting,
                'result_content' => $request->c_result,
            ]);

            DB::table('ia_mas_tdiagram')
            ->where([
                ['kd_td', 'like', $request->kd_td],
                ])           
            ->update([
                'kd_td' => substr($request->kd_td, 0, 8)
            ]);

            DB::table('ia_tdiagram_review')
            ->where([
                ['kd_td', 'like', $request->kd_td],
                ])           
            ->update([
                'kd_td' => substr($request->kd_td, 0, 8)
            ]);
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }
    }

    public function delete_turtle(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";
            
            DB::table('ia_tdiagram_content')
            ->where([
                ['kd_td', 'like', $request->kd_td],
                ])           
            ->delete();

            DB::table('ia_mas_tdiagram')
            ->where([
                ['kd_td', 'like', $request->kd_td],
                ])           
            ->delete();

            DB::table('ia_tdiagram_content')
            ->where([
                ['kd_td', 'like', $request->kd_td],
                ])           
            ->delete();
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }
    }

    public function rename_turtle(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";
            
            DB::table('ia_mas_tdiagram')
            ->where([
                ['kd_td', 'like', $request->kd_td],
                ])           
            ->update(['td_name' => $request->nama]);
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }       

    }

    public function add_review_turtle(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";

            DB::table('ia_tdiagram_review')       
            ->insert([
                'kd_td' => $request->kd_td,
                'npk_reviewed' => $request->npk,
                'status' => 'AUDITEE'
                ]);
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }       

    }

    public function add_review_auditor(Request $request)
    {
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";

            DB::table('ia_tdiagram_review')       
            ->insert([
                'kd_td' => $request->kd_td,
                'npk_reviewed' => $request->npk,
                'status' => 'AUDITOR',
                ]);
            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indctr = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }       

    }

    public function temuan_audit_form(){
        $ia = new InternalAudit;
        $getdep = $ia->getDep();
        $get_latest = $ia->getTahunNow2();
        $getauth = $ia->checkAuth(Auth::user()->username, $get_latest->tahun, $get_latest->rev_no);
        $getinisial = $ia->checkInisial(Auth::user()->username, $get_latest->tahun, $get_latest->rev_no);

        // return $getinisial;

        if ($getauth != null){              
        $get_finding_number = DB::table('ia_temuan1')
        ->select('finding_no')
        ->where('finding_no', 'like', $getinisial.'%')
        ->orderBy('finding_no', 'desc')
        ->value("finding_no");

        if ($get_finding_number == null ){
            $get_finding_number = $getinisial.'/'.Carbon::now()->format('y').'/I'.'/001';
        } else {
            $lastincrement = substr($get_finding_number, strlen($get_finding_number) - 3, strlen($get_finding_number));
            $get_finding_number = substr($get_finding_number, 0, strlen($get_finding_number) - 3) . str_pad($lastincrement + 1, 3, 0, STR_PAD_LEFT);
        }
            return view('audit.temuanaudit.create')->with(compact(['getdep', 'getauth', 'get_finding_number']));
        } else {
            return view('errors.403');
        }
    }

    public function getlist(){
        $ia = new InternalAudit;
        $getdep = $ia->getDep();

        return view('audit.temuanaudit.create')->with(compact(['getdep']));
    }

    public function temuan_audit_form_submit(Request $request){
        try {
            DB::beginTransaction();
            $msg = "Berhasil disubmit.";
            $indicator = "1";

            DB::table('ia_temuan1')       
            ->insert([
                'finding_no' => $request->finding_no,
                'plant' => $request->kd_plant,
                'dep' => $request->kd_dep,
                'cat' => $request->cat,
                'a_type' => $request->kd_type,
                'shift' => $request->kd_shift,
                'periode' => $request->periode,
                'tahun' => $request->tahun,
                'statement_of_nc' => $request->snc,
                'qms_doc_ref' => $request->qms_doc,
                'statement_of_nc' => $request->snc,
                'iatf_ref' => $request->ref_iatf,
                'iso_ref' => $request->ref_iso,
                'csr' => $request->csr,
                'detail_problem' => $request->dop,
                'tanggal' => $request->tgl,
                'creaby' => Auth::user()->username,
                'line' => $request->line,
                'process' => $request->process
                ]);
            
            $npk_auditor = $request->auditor;
            for($count = 0; $count < 4; $count++) // detail auditor
            {
            DB::table('ia_temuan2')       
            ->insert([
                'finding_no' => $request->finding_no,
                'status' => 'Auditor',
                'npk' => $npk_auditor[$count],
                'prioritas' => $count + 1,
                ]);
            }

            $npk_auditee = $request->auditee;
            for($count = 0; $count < 4; $count++) // detail auditor
            {
            DB::table('ia_temuan2')       
            ->insert([
                'finding_no' => $request->finding_no,
                'status' => 'Auditee',
                'npk' => $npk_auditee[$count],
                'prioritas' => $count + 1,
                ]);
            }

            
            DB::commit();

            return response()->json(['msg' => $msg, 'indicator' => $indicator]);

        } catch (Exception $ex) {
            DB::rollback();
            $msg = $ex;
            $indicator = "0";
            return response()->json(['msg' => $msg, 'indicator' => $indicator]);
        }
    }

public function daftartemuan(Request $request){
    
    if($request->ajax()){
        $ia = new InternalAudit;
        $get_temuan = $ia->get_temuan();
        return Datatables::of($get_temuan)
        ->addIndexColumn()
        ->editColumn('finding_no', function($get_temuan){
            return '<a href="' . route('auditors.daftartemuanByNo', $get_temuan->id) .'">'.$get_temuan->finding_no.'</a>';
        })
        ->editColumn('auditee_sign', function($get_temuan){
            $cek_ttd_auditee = DB::table('ia_temuan2')
            ->select('npk')
            ->where('finding_no', 'like', $get_temuan->finding_no)
            ->where('prioritas', 'like', '1')
            ->where('status', 'like', 'Auditee')
            ->value("npk");
            $cek_ttd_auditor = DB::table('ia_temuan2')
            ->select('npk')
            ->where('finding_no', 'like', $get_temuan->finding_no)
            ->where('prioritas', 'like', '1')
            ->where('status', 'like', 'Auditor')
            ->value("npk");
            $ia = new InternalAudit;
            $nama_auditee_sign = $ia->namaByNpk($cek_ttd_auditee);
            $nama_auditor_sign = $ia->namaByNpk($cek_ttd_auditor);

            if ($get_temuan->auditee_sign == ''){
                if ($cek_ttd_auditee == Auth::user()->username){
                    return '<i>Your sign </i><a class="btn btn-xs btn-success"'.'href="' . route('auditors.temuanaudit_sign_auditee', $get_temuan->id) .'">'.'Sign Here'.'</a><i> as Auditee</i>';
                } else {
                    return '<i>Sign by '. $nama_auditee_sign.' (Auditee)</i>';
                }
            } else if($get_temuan->auditor_sign == '') {
                if ($cek_ttd_auditor == Auth::user()->username){
                    return '<i>Your sign </i><a class="btn btn-xs btn-success"'.'href="' . route('auditors.temuanaudit_sign_auditor', $get_temuan->id) .'">'.'Sign Here'.'</a><i> as Auditor</i>';
                } else {
                    return '<i>Sign by '. $nama_auditor_sign.' (Auditor)</i>';
                }
            } else {
                return '<a class="btn btn-primary btn-xs"'.'href="' . route('auditors.temuanaudit_cetak', $get_temuan->id) .'">PRINT</a>';
            }
        })
        ->editColumn('tanggal', function($get_temuan){
            $getdate = $get_temuan->tanggal;
            $newDate = date("d F Y", strtotime($getdate));
            return $newDate;
        })
        ->editColumn('creaby', function($get_temuan){
            $ia = new InternalAudit;
            $getNama = $ia->namaByNpk($get_temuan->creaby);
            return $getNama;
        })
        ->make(true);
        
    }
    return view('audit.temuanaudit.list');

}

public function daftartemuanByNo($kd){
    
        $ia = new InternalAudit;
        $get_temuan = $ia->get_temuanByNo($kd);
        $get_audteetor = $ia->get_temuanByNo_npk($get_temuan->finding_no);
        $npk_auditee = DB::table('ia_temuan2')
        ->select('npk')
        ->where('finding_no', 'like', $get_temuan->finding_no)
        ->where('prioritas', 'like', '1')
        ->where('status', 'like', 'Auditee')
        ->value("npk");
        $npk_auditor = DB::table('ia_temuan2')
        ->select('npk')
        ->where('finding_no', 'like', $get_temuan->finding_no)
        ->where('prioritas', 'like', '1')
        ->where('status', 'like', 'Auditor')
        ->value("npk");
        $nama_auditee = $ia->namaByNpk($npk_auditee);
        $nama_auditor = $ia->namaByNpk($npk_auditor);


        return view('audit.temuanaudit.detail')->with(compact('get_temuan', 'get_audteetor', 'nama_auditee', 'nama_auditor'));

}

public function sign_auditee($kd){
    
        $ia = new InternalAudit;
        $get_temuan = $ia->get_temuanByNo($kd);
        $get_audteetor = $ia->get_temuanByNo_npk($get_temuan->finding_no);
        
        return view('audit.temuanaudit.sign-auditee')->with(compact('get_temuan', 'get_audteetor'));

}

public function sign_auditee_submit(Request $request, $kd){
    
    try {
        DB::beginTransaction();
        $msg = "Berhasil disubmit.";
        $indicator = "1";

        DB::table('ia_temuan1')
        ->where('id', '=', $kd)
        ->update([
            'containment_action' => $request->coa,
            'pic' => $request->pic,
            'due_date' => $request->due_date,
            'target_date' => $request->target_date,
            'auditee_sign' => $request->sign,
            ]);

        DB::commit();

        return response()->json(['msg' => $msg, 'indicator' => $indicator]);

    } catch (Exception $ex) {
        DB::rollback();
        $msg = $ex;
        $indicator = "0";
        return response()->json(['msg' => $msg, 'indicator' => $indicator]);
    }
}

public function sign_auditor($kd){
    
    $ia = new InternalAudit;
    $get_temuan = $ia->get_temuanByNo($kd);
    $get_audteetor = $ia->get_temuanByNo_npk($get_temuan->finding_no);
    $npk_auditee = DB::table('ia_temuan2')
    ->select('npk')
    ->where('finding_no', 'like', $get_temuan->finding_no)
    ->where('prioritas', 'like', '1')
    ->where('status', 'like', 'Auditee')
    ->value("npk");
    $npk_auditor = DB::table('ia_temuan2')
    ->select('npk')
    ->where('finding_no', 'like', $get_temuan->finding_no)
    ->where('prioritas', 'like', '1')
    ->where('status', 'like', 'Auditor')
    ->value("npk");
    $nama_auditee = $ia->namaByNpk($npk_auditee);
    $nama_auditor = $ia->namaByNpk($npk_auditor);

    return view('audit.temuanaudit.sign-auditor')->with(compact('get_temuan', 'get_audteetor', 'nama_auditee', 'nama_auditor'));

}

public function sign_auditor_submit(Request $request, $kd){
    
    try {
        DB::beginTransaction();
        $msg = "Berhasil disubmit.";
        $indicator = "1";

        DB::table('ia_temuan1')
        ->where('id', '=', $kd)
        ->update([
            'auditor_sign' => $request->sign,
            ]);

        DB::commit();

        return response()->json(['msg' => $msg, 'indicator' => $indicator]);

    } catch (Exception $ex) {
        DB::rollback();
        $msg = $ex;
        $indicator = "0";
        return response()->json(['msg' => $msg, 'indicator' => $indicator]);
    }
}

public function cetak_temuanaudit($kd){
    $ia = new InternalAudit;
    $get_temuan = $ia->get_temuanByNo($kd);
    $get_audteetor = $ia->get_temuanByNo_npk($get_temuan->finding_no);
    $npk_auditee = DB::table('ia_temuan2')
    ->select('npk')
    ->where('finding_no', 'like', $get_temuan->finding_no)
    ->where('prioritas', 'like', '1')
    ->where('status', 'like', 'Auditee')
    ->value("npk");
    $npk_auditor = DB::table('ia_temuan2')
    ->select('npk')
    ->where('finding_no', 'like', $get_temuan->finding_no)
    ->where('prioritas', 'like', '1')
    ->where('status', 'like', 'Auditor')
    ->value("npk");
    $nama_auditee = $ia->namaByNpk($npk_auditee);
    $nama_auditor = $ia->namaByNpk($npk_auditor);

    $error_level = error_reporting();
    error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING); 
    
    $pdf = PDF::loadView('audit.report.cetak-temuan', ['get_temuan' => $get_temuan, 'get_audteetor' => $get_audteetor, 'nama_auditee' => $nama_auditee, 'nama_auditor' => $nama_auditor]); // use PDF;

    return $pdf->download(''.$get_temuan->finding_no.'.pdf');
    // return view('audit.report.cetak-temuan')->with(compact('get_temuan', 'get_audteetor', 'nama_auditee', 'nama_auditor'));;
}


    
}
