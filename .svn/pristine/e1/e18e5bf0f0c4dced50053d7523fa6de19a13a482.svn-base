<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
use App\Pistandard;
use Yajra\Datatables\Html\Builder;
use Yajra\Datatables\Datatables;
use Session;
use exception;
use Carbon\Carbon;
use DB;
use App\User;
use Alert;

class PissectheadController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */



    public function aprovalSectHeadSQE(Request $request, Builder $htmlBuilder)
    {
        //
        if ($request->ajax()) {
            $pistandards = DB::table("pistandards")
            ->whereIn('status',[1,2,3]) 
            ->select(DB::raw("no_pisigp, no_pis, model, part_no, part_name, nama_supplier, status, norev"))
            ->get();
            return Datatables::of($pistandards)
            ->editColumn('status', function($pistandard){
                if($pistandard->status == 0){
                    return '<b class="btn-xs btn-info btn-icon-pg" action="disable"> Belum Submit</b>';

                }elseif($pistandard->status == 1){
                    return '<b class="btn-xs btn-info btn-icon-pg"  action="disable"> Belum Approv </b>';

                }elseif($pistandard->status == 2){
                    return '<b class="btn-xs btn-success btn-icon-pg"  action="disable"> Disetujui </b>';

                }elseif($pistandard->status == 3){
                    return '<b class="btn-xs btn-danger btn-icon-pg" action="disable"> Ditolak</b>';
                }
            })
            ->editColumn('no_pis', function($pistandard) {
                return '<a href="'.route('pissecthead.show', [base64_encode($pistandard->no_pisigp),base64_encode($pistandard->norev)]).'" data-toggle="tooltip" data-placement="top" title="Detail No Pis '. $pistandard->no_pis .'">'.$pistandard->no_pis.'</a>';
            })

            ->addColumn('action', function($pistandard){
                if ($pistandard->status == 1) {
                     return (['<a href="'.route('pisdepthead.unlock', [base64_encode($pistandard->no_pisigp),base64_encode($pistandard->norev)]).'" data-toggle="tooltip" data-placement="top" title="Unlock for editing" class="btn btn-xs btn-success"><span class="glyphicon glyphicon-edit"></span></a>'.
                      
                    '<a href="'.route('pistandards.printpis', [base64_encode($pistandard->no_pisigp),base64_encode($pistandard->norev)]).'" data-toggle="tooltip" data-placement="top" title="Detail No Pis " class="btn btn-xs btn-info"><span class="glyphicon glyphicon-print"></span></a>']);

                }elseif ($pistandard->status == 2) {
                     return (['<a href="'.route('pisdepthead.unlock', [base64_encode($pistandard->no_pisigp),base64_encode($pistandard->norev)]).'" data-toggle="tooltip" data-placement="top" title="Unlock for editing" class="btn btn-xs btn-success"><span class="glyphicon glyphicon-edit"></span></a>'.
                      
                    '<a href="'.route('pistandards.printpis', [base64_encode($pistandard->no_pisigp),base64_encode($pistandard->norev)]).'" data-toggle="tooltip" data-placement="top" title="Detail No Pis " class="btn btn-xs btn-info"><span class="glyphicon glyphicon-print"></span></a>']);
                     
                }elseif ($pistandard->status == 3) {
                     return (['<a href="'.route('pistandards.printpis', [base64_encode($pistandard->no_pisigp),base64_encode($pistandard->norev)]).'" data-toggle="tooltip" data-placement="top" title="Detail No Pis " class="btn btn-xs btn-info"><span class="glyphicon glyphicon-print"></span></a>']);   
                }
            })
            ->editColumn('rev_doc', function($pistandard){
               return "Rev.".$pistandard->norev;
           })->make(true);
            
        } 
        return view('pis.sect.aprovalSectHeadSQE')->with(compact('$pistandard'));
    }


    

    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($no_pisigp, $norev)
    {
        //
        $no_pisigp = base64_decode($no_pisigp); 
          $norev = base64_decode($norev); 
         $pistandards = DB::table('pistandards')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                    ->where(DB::raw("norev"), '=', $norev)
                    ->first(); 

               
         $composition = DB::table('pisccompositions')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();

         $properties = DB::table('pismproperties')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();

          $performances = DB::table('piswperformances')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();

          $treatements = DB::table('pisstreatements')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();

          $htreatements = DB::table('pishtreatements')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();

          $appearences = DB::table('pisappearences')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();

          $dimentions = DB::table('pisdimentions')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();

          $socfs = DB::table('pissocfs')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();

          $routs = DB::table('pisroutes')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                     ->where(DB::raw("norev"), '=', $norev)
                    ->first();
           $revisi = DB::table('pisrevisions')
                    ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                    ->first();

            $entity = new Pistandard();
 

        
            //  echo json_encode($pistandard) ;
            // die();

        return view('pis.sect.show')->with(compact(['pistandards','composition','properties','performances','treatements','htreatements','appearences','dimentions','socfs','routs','revisi', 'entity','no_pisigp','logo_supplier','staff_spy','supervisor_spy','manager_spy']));
    }


    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($no_pisigp,$norev)
    {
       $no_pisigp = base64_decode($no_pisigp); 
       $norev = base64_decode($norev); 

       $pistandard = DB::table('pistandards')
       ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
       ->where(DB::raw("norev"), '=', $norev)
       ->get()
       ->first();  


             // echo json_encode($pistandard) ;
             //    die();

     return view('pis.sect.upload')->with(compact('pistandard'));

 }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
        $data = $request->all();
         $norev = trim($data['norev']) !== '' ? trim($data['norev']) : null;
        $no_pisigp = trim($data['no_pisigp']) !== '' ? trim($data['no_pisigp']) : null;        
        $pistandard = DB::table('pistandards')
                      ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
                      ->first(); 
        $approve_sect = $pistandard->approve_sect;
        $filename = $pistandard->approve_sect;
        // isi field approve_staff jika ada approve_staff yang diupload
        if ($request->hasFile('approve_sect')) {
        // Mengambil file yang diupload
            $uploaded_approve_sect = $request->file('approve_sect');
        // mengambil extension file
            $extension = $uploaded_approve_sect->getClientOriginalExtension();
        // membuat nama file random berikut extension
            $filename = md5(time()) . '.' . $extension;
        // menyimpan approve_staff ke folder public/img
            $destinationPath = public_path() . DIRECTORY_SEPARATOR . 'img';
            $uploaded_approve_sect->move($destinationPath, $filename);
        // mengisi field approve_staff di book dengan filename yang baru dibuat

        }

        DB::table('pistandards')
        ->where(DB::raw("no_pisigp"), '=', $no_pisigp)
         ->where(DB::raw("norev"), '=', $norev)
        ->Update([
          'notesect'=>$request->notesect,
          'approve_sect'=>$request->approve_sect = $filename
          ]); 
        return redirect()->route('pissecthead.aprovalSectHeadSQE');
        
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
